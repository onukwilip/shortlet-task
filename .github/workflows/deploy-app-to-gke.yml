on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  release:
    types:
      - published
  workflow_dispatch:
jobs:
  build-deploy:
    name: Build and deploy to GKE Cluster
    runs-on: ubuntu-latest
    env:
      IMAGE: prince2006/shortlet-task
      GKE_CLUSTER: shortlet-cluster
      GKE_ZONE: us-central1
      PORT: 5000
      SERVICE_NAME: shortlet-task-api-server-service
    steps:
      - name: Chackout
        uses: actions/checkout@v3

      - name: Authenticate Google CLI
        id: auth-google-cli
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Authenticate for Docker Hub
        run: docker login -u ${{secrets.D_USER}} -p ${{secrets.D_PASS}}

      - name: Build Image
        run: docker build -t ${{env.IMAGE}}:latest -t ${{env.IMAGE}}:${{github.sha}} .

      - name: Publish Images to DockerHub repo
        run: |
          docker push ${{env.IMAGE}}:latest
          docker push ${{env.IMAGE}}:${{github.sha}}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.3

      - name: Initialize Terraform
        run: |
          cd terraform 
          terraform init

      - name: Check if the GKE Cluster exists
        id: check_cluster
        run: |
          if gcloud container clusters describe ${{env.GKE_CLUSTER}} --region ${{env.GKE_ZONE}} > /dev/null 2>&1; then
            echo "CLUSTER_EXISTS=1" >> $GITHUB_ENV
          else
            echo "CLUSTER_EXISTS=0" >> $GITHUB_ENV
          fi

      - name: Install OPA to enforce policies before resources are created, If the Cluster does NOT exist
        if: env.CLUSTER_EXISTS == 0
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
          chmod +x opa
          sudo mv opa /usr/local/bin/

      - name: Apply the Terraform configuration - Set up the GKE Cluster, Cloud Router, NAT gateway, create the API deployment and service, If the Cluster does NOT exist
        if: env.CLUSTER_EXISTS == 0
        run: |
          cd terraform 
          terraform plan -out=tfplan
          terraform show -json tfplan > tfplan.json
          opa eval --input tfplan.json --data deny_public_ip.rego 'data.terraform.gke.deny'
          terraform apply --auto-approve

      - name: Configure up the GKE Cluster credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Deploy app to Cluster as a deployment, If the Cluster has been previously created
        if: env.CLUSTER_EXISTS == 1
        run: |
          cd kubernetes
          kubectl apply -f kube.yml
          kubectl get pods

      - name: Get the External IP adress of the deployed service
        id: get-ip
        run: |
          EXTERNAL_IP=""
          while [ -z "$EXTERNAL_IP" ]; do
            echo "Waiting for external IP..."
            EXTERNAL_IP=$(kubectl get svc ${{env.SERVICE_NAME}} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            [ -z "$EXTERNAL_IP" ] && sleep 10
          done
          echo "External IP is $EXTERNAL_IP"
          echo "::set-output name=external_ip::$EXTERNAL_IP"

      - name: Test the deployed API
        run: |
          echo "Testing API at http://$EXTERNAL_IP/"
          RESPONSE=$(curl http://$EXTERNAL_IP:${{env.PORT}}/)
          echo "Response: $RESPONSE"
        env:
          EXTERNAL_IP: ${{ steps.get-ip.outputs.external_ip }}
